#+TITLE: Git Workshop
#+STARTUP: inlineimages

* Prework
- Install =git=
  - For Mac and Linux users, you shouldn't need to do anything.
  - For Windows users, [[https://git-scm.com/downloads][download and install =git= here]].
- Follow [[https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup][First-Time Git Setup]] guide.
- Fork this [[https://github.com/dawranliou/git-workshop][repo]] on Github.

* Agenda
:PROPERTIES:
:TOC:      :include all :ignore this :depth 1
:END:
:CONTENTS:
- [[#prework][Prework]]
- [[#housekeeping][Housekeeping]]
- [[#icebreaker][Icebreaker]]
- [[#introduction][Introduction]]
- [[#git-init--git-clone][git init / git clone]]
- [[#git-status][git status]]
- [[#git-add][git add]]
- [[#git-commit][git commit]]
- [[#git-branch][git branch]]
- [[#git-checkout][git checkout]]
- [[#git-merge][git merge]]
- [[#git-rebase][git rebase]]
- [[#git-push][git push]]
- [[#whats-next][What's next?]]
- [[#bonus][Bonus]]
:END:

* Housekeeping
- [[https://github.com/dawranliou/git-workshop.git][Workshopt repo]]
- ~ +1+ 4 hours
- Ask questions. Don't worry about interrupting the workshop.
- I'll also remind myself to stop and ask if you have any question.
- Be sure to have access to [[https://git-scm.com/][git]].

* Icebreaker
- Two truths and a lie

* Introduction
** Why version control systems?
For the peace of mind.

#+CAPTION: https://xkcd.com/1597/
[[file:img/git.png]]

/Source: https://xkcd.com/1597//

** Why 2-stage commit?
Definitions:
- Workspace - all unstaged changes.
- Staging area (a.k.a. index) - a “holding area” for changes that will be
  committed when you next do a git commit.

Further Readings:
- https://gitolite.com/uses-of-index.html
- https://softwareengineering.stackexchange.com/a/69187

* =git init= / =git clone=
#+begin_quote
Getting and Creating Projects.
#+end_quote

- =init=: Create an empty Git repository or reinitialize an existing one.
- =clone=: Clone a (remote) repository into a new directory

** Exercise: Initialize a git repository in a directory

#+begin_src shell

$ mkdir new-repo
$ cd new-repo
$ git init

#+end_src

** Exercise: Clone this repository into your file system

#+begin_src shell

# Go to a different working directory assuming you are still in the new-repo
# directory.
$ cd ..
# if you have ssh setup already, do:
$ git clone git@github.com:dawranliou/git-workshop.git
# otherwise, do:
$ git clone https://github.com/dawranliou/git-workshop.git

#+end_src

** Question: What do you think initializing the git repo did to your working directory?

* =git status=
#+begin_quote
Show the working tree status.
#+end_quote

Git status gives you a lot of information about the current state of your git
repo. When I screwed up a git repo, I usually could deduce what went wrong based
on the git status. You should be doing git status a lot too to get familiar with
git.

** Exercise:: Check the status of your repo

#+begin_src shell

$ cd git-workshop
$ git status

#+end_src

** Question:: What do you see in the git status?

#+begin_src shell

On branch master/main/develop

Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

#+end_src

* =git add=
#+begin_quote
Add file contents to the index.
#+end_quote

This is the first stage of the 2-stage commit. We can have multiple dirty files,
i.e. files with untracked changes, but only select a couple to be committed.

** Exercise: Add a new file into the staging area.

#+begin_src shell

# Create a new empty file
$ touch exercise.txt
$ git add exercise.txt
# Or add everything to the staging area
$ git add .

#+end_src

** Question: =git status=?

#+begin_src shell

$ git status

#+end_src

* =git commit=
#+begin_quote
Record changes to the repository.
#+end_quote

A commit is a single unit in git's version control system. Every single commit
is assigned with a SHA code to preserve its integrity. Traversing the commit
history and operating on the commit history is simple and fast in git. You are
encouraged to make small, incremental commits rather than a huge one. You are
also encouraged to make imperfect commits and clean up the history later.

#+CAPTION: https://xkcd.com/1296
[[file:./img/git_commit.png]]

/Source: https://xkcd.com/1296//

** Exercise: Commit the staging area

#+begin_src shell

$ git commit

# Or attach the commit message in one go
$ git commit -m "Add file - exercise.txt"

#+end_src

** Question: =git status=?

#+begin_src shell

$ git status

#+end_src

** Exercise: Add another commit in master

#+begin_src shell

$ echo "# exercise.txt - a file for exercise" >> exercise.txt
$ git add exercise.txt
$ git commit "Add file comment"

#+end_src

* =git branch=
#+begin_quote
List, create, or delete branches.
#+end_quote

Branch is one of the most liberating ability given by a version control
system. You are free to track multiple states of your source code at any given
time without worrying about screwing it up.

In practice, I rarely use the =branch= command to create a new branch because of
a shortcut we'll see in the next section.

** Question: Can you find an example where branching is used without a version control system?

* =git checkout=
#+begin_quote
Switch branches or restore working tree files
#+end_quote

** Exercise: Checkout a new branch

#+begin_src shell

$ git checkout -b develop

#+end_src

** Question: =git status=?

#+begin_src shell

$ git status

#+end_src

** Exercise: Add more commits in develop branch

#+begin_src shell

$ echo "This is line one" >> exercise.txt
$ git add exercise.txt
$ git commit "Add the first line"

$ echo "This is line two" >> exercise.txt
$ git add exercise.txt
$ git commit "Add the second line"

$ echo "This is line three" >> exercise.txt
$ git add exercise.txt
$ git commit "Add the third line"

#+end_src

** Question: =git status=?

#+begin_src shell

$ git status

#+end_src

** Exercise: Switch back to =master= branch and add commits

#+begin_src shell

$ git checkout master

$ echo "This is line 0" >> exercise.txt
$ git add exercise.txt
$ git commit "Add the zeroth line"

$ echo "This is line 1" >> exercise.txt
$ git add exercise.txt
$ git commit "Add the first line"

$ echo "This is line 2" >> exercise.txt
$ git add exercise.txt
$ git commit "Add the second line"

#+end_src

* =git merge=
#+begin_quote
Join two or more development histories together
#+end_quote

When we have two versions of our source code, we can then merge them together. A
practical case would be merging a =feature= branch into the master/main branch
after the =feature= branch is fully tested. Imaging we currently have this:

#+begin_src
      A---B---C develop
     /
D---E---F---G master
#+end_src

By merging the develop to master, our commit history looks like:

#+begin_src
      A---B---C develop
     /         \
D---E---F---G---H master
#+end_src

** Exercise: Merge the develop branch into the master
** Question: =git status=?

#+begin_src shell

# Merge command merges the "other" branch into the "current" branch. Therefore,
# we need to switch back to the master branch first.
$ git checkout master
# Merge in the develop brach
$ git merge develop

# ...and a merge conflict!

#+end_src

** Question: What does it mean to have conflicts?

** Exercise: Resolve the conflict

#+begin_src shell

# Open your text editor and fix the conflicts

$ git merge --continue
# Or abort it
# $ git merge --abort

#+end_src

* =git rebase=
#+begin_quote
Reapply commits on top of another base tip.
#+end_quote

So far, we haven't encounter any command that is destructive, which isn't the
case for =rebase=. =rebase= rewrites the git history and it is irreversible, so
use it cautiously. Although you can choose to abort the =rebase= operation
anytime, it's safest to first create a temporary branch to track the existing
state before =rebase=. However destructive, it is useful to keep the git history
clean while collaborating with others. Let's think of the =feature= branch
again:

#+begin_src
      A---B---C feature
     /
D---E---F---G master
#+end_src

When we rebase the =feature= branch on our =master=, we rewrite the history on
=feature= to:

#+begin_src
              A'--B'--C' feature
             /
D---E---F---G master
#+end_src

The =feature='s commits, =A=, =B=, and =C=, becomes =A'=, =B'=, and =C'=.

See [[https://git-scm.com/book/en/v2/Git-Branching-Rebasing#_rebase_vs_merge][Rebase vs. Merge]] for their differences.

** TODO Exercise: Rebase the =feature= on the =master=

* =git push=
#+begin_quote
Update remote refs along with associated objects.
#+end_quote

* What's next?
- Working with remote repo
  - =git remote=
  - =git fetch=
  - =git pull=
- Knowing Git Workflows: see [[https://www.atlassian.com/git/tutorials/comparing-workflows][Comparing Workflows]]
- [[https://git-scm.com/book/en/v2][Pro Git Book]]

* Bonus
- [[https://git-scm.com/docs][Git official references]]
- [[https://github.com/GitAlias/gitalias][Git aliases]]
- [[https://ohshitgit.com/][Oh Shit, Git!?!]] - how to fix your screwed-up git
  repository.
